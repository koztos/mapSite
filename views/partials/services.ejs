<% for(var [site, terminal] of terminals.entries()) { %>
<div id="<%= site %>" style="display: block;">
    <span class="alive">
        <%= terminal.alive %></span>
    <span class="address">
        <%= terminal.address %></span>

</div>
<% }; %>
<div id="map"></div>
<div id="content"></div>

<script>
    var map;
    var arrMarker = [];
    var popup, Popup;
    var offline = 'http://i.imgur.com/417YviZ.png';
    var online = 'http://i.imgur.com/ovI4Iso.png';
    function initMap() {
        definePopupClass();
        var options = {
            zoom: 5,
            center: { lat: 48.4, lng: -89.843683 }
        };

        map = new google.maps.Map(document.getElementById('map'), options);

        addMarker(markerArray);
    }

    function addMarker(sites) {
        for (var [site, location] of sites.entries()) {
            if (document.getElementById(site) != null) {
                if (document.getElementById(site).innerText.match('true')) {
                    var marker = new google.maps.Marker({
                        position: location.coor,
                        map: map,
                        animation: google.maps.Animation.DROP,
                        title: site,
                        icon: online,
                        content: `${site}    ${document.getElementById(site).lastElementChild.innerText}`
                    });
                    arrMarker.push(marker);
                    marker.addListener('click', () => {
                        console.log(location.coor.lat);
                        console.log(location.coor.lng);
                        popup = new Popup(
                            new google.maps.LatLng(location.coor.lat, location.coor.lng),
                            document.getElementById('content'),
                            marker.content,
                            map);
                        popup.setMap(map);
                    })
                } else {
                    var marker = new google.maps.Marker({
                        position: location.coor,
                        map: map,
                        animation: google.maps.Animation.DROP,
                        title: site,
                        icon: offline,
                        content: `${site}    ${document.getElementById(site).lastElementChild.innerText}`
                    });
                    arrMarker.push(marker);
                    marker.addListener('click', () => {
                        console.log(location.coor.lat);
                        console.log(location.coor.lng);
                        popup = new Popup(
                            new google.maps.LatLng(location.coor.lat, location.coor.lng),
                            document.getElementById('content'),
                            location.content,
                            map);
                        popup.setMap(map);
                    })
                }
            } else {
                var marker = new google.maps.Marker({
                    position: location.coor,
                    map: map,
                    animation: google.maps.Animation.DROP,
                    title: site,
                    content: 'no Default Gateway listed'
                });
                arrMarker.push(marker);
                marker.addListener('click', () => {
                    console.log(location.coor.lat);
                    console.log(location.coor.lng);
                    popup = new Popup(
                        new google.maps.LatLng(location.coor.lat, location.coor.lng),
                        document.getElementById('content'),
                        location.content,
                        map);
                    popup.setMap(map);
                })
            };

        }

        //infoWindow.open(map, marker);

    }
    function reloadMarkers() {
        for (var [site, marker] of markerArray.entries()) {
            marker.setMap(null);
        }
        arrMarker = [];

        add
    }
    var markerArray = new Map([
        ['Brampton',
            {
                coor: { lat: 43.748650, lng: -80.99999 },
                content: "",
                iconImage: ""
            }],
        ['Vancouver',
            {
                coor: { lat: 49.188770, lng: -122.895640 },
                content: "",
                iconImage: ""
            }],
        ['Calgary',
            {
                coor: { lat: 51.070730, lng: -114.006580 },
                content: "",
                iconImage: ""
            }],
        ['Goreway',
            {
                coor: { lat: 43.744320, lng: -79.669830 },
                content: "",
                iconImage: ""
            }],
        ['Ottawa',
            {
                coor: { lat: 45.405240, lng: -75.613190 },
                content: "",
                iconImage: ""
            }],
        ['Montreal',
            {
                coor: { lat: 45.48027, lng: -73.777590 },
                content: "",
                iconImage: ""
            }],
        ['Halifax',
            {
                coor: { lat: 44.716670, lng: -63.598890 },
                content: "",
                iconImage: ""
            }],
        ['St. Johns, NB',
            {
                coor: { lat: 45.213270, lng: -66.172920 },
                content: "",
                iconImage: ""
            }],
        ['St. Johns, NL',
            {
                coor: { lat: 47.531280, lng: -52.840540 },
                content: "",
                iconImage: ""
            }],
        ['Moncton',
            {
                coor: { lat: 46.101660, lng: -64.899060 },
                content: "",
                iconImage: ""
            }],
        ['My Phone',
            {
                coor: { lat: 46.101660, lng: -54.899060 },
                content: "",
                iconImage: ""
            }]
    ]);


    /** Defines the Popup class. */
    function definePopupClass() {
        /**
         * A customized popup on the map.
         * @param {!google.maps.LatLng} position
         * @param {!Element} content
         * @param {!String} contentText
         * @param {!map} map
         * @constructor
         * @extends {google.maps.OverlayView}
         */
        Popup = function (position, content, contentText, map) {
            this.position = position;

            document.getElementById('content').innerText = contentText;
            content.classList.add('popup-bubble-content');

            var pixelOffset = document.createElement('div');
            pixelOffset.classList.add('popup-bubble-anchor');
            pixelOffset.appendChild(content);

            this.anchor = document.createElement('div');
            this.anchor.classList.add('popup-tip-anchor');
            this.anchor.appendChild(pixelOffset);
            var anchor = this.anchor;
            // Optionally stop clicks, etc., from bubbling up to the map.
            this.stopEventPropagation();
            google.maps.event.addListener(map, "click", function (event) {
                document.getElementById('content').style.display = 'none';
            });



        };
        // NOTE: google.maps.OverlayView is only defined once the Maps API has
        // loaded. That is why Popup is defined inside initMap().
        Popup.prototype = Object.create(google.maps.OverlayView.prototype);

        /** Called when the popup is added to the map. */
        Popup.prototype.onAdd = function () {
            this.getPanes().floatPane.appendChild(this.anchor);
            document.getElementById('content').style.display = 'block';
        };

        /** Called when the popup is removed from the map. */
        Popup.prototype.onRemove = function () {
            console.log(this.anchor);
            if (this.anchor.parentElement) {
                this.anchor.parentElement.remove(this.anchor);
            }
        };


        /** Called when the popup needs to draw itself. */
        Popup.prototype.draw = function () {
            var divPosition = this.getProjection().fromLatLngToDivPixel(this.position);
            // Hide the popup when it is far out of view.
            var display =
                Math.abs(divPosition.x) < 4000 && Math.abs(divPosition.y) < 4000 ?
                    'block' :
                    'none';

            if (display === 'block') {
                this.anchor.style.left = divPosition.x + 'px';
                this.anchor.style.top = divPosition.y + 'px';
            }
            if (this.anchor.style.display !== display) {
                this.anchor.style.display = display;
            }


        };

        /** Stops clicks/drags from bubbling up to the map. */
        Popup.prototype.stopEventPropagation = function () {
            var anchor = this.anchor;
            anchor.style.cursor = 'auto';

            ['click', 'dblclick', 'contextmenu', 'wheel', 'mousedown', 'touchstart',
                'pointerdown']
                .forEach(function (event) {
                    anchor.addEventListener(event, function (e) {
                        e.stopPropagation();

                    });
                });

        };
    }
</script>
<script async defer src='https://maps.googleapis.com/maps/api/js?key=AIzaSyBTCjCKuLzVJQ0hx83pbqhTwM6Cz-bJ_4c&callback=initMap'></script>